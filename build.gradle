// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
        classpath 'me.tatarka:gradle-retrolambda:3.7.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'jacoco'
    id "org.sonarqube" version "2.6"
}

allprojects {
    repositories {
        jcenter()
        google()
    }
}

subprojects {
    apply plugin: 'checkstyle'
    project.checkstyle {
        toolVersion "8.4"
        configFile rootProject.file('checkstyle.xml')
        configProperties = ["suppressionFile": rootProject.file('suppressions.xml')]
    }

    task checkstyle(type: Checkstyle) {
        showViolations = true
        configFile rootProject.file('checkstyle.xml')
        configProperties = ["suppressionFile": rootProject.file('suppressions.xml')]

        source 'src'
        include '**/*.java'
        exclude '**/gen/**'
        exclude '**/R.java'
        exclude '**/BuildConfig.java'

        // empty classpath
        classpath = files()
    }

    apply plugin: 'jacoco'
}

subprojects.each { project ->
    def checkStyleTask = project.getTasksByName("checkstyle", false).find()
    def checkTask = project.getTasksByName("check", false).find()
    if (checkTask != null && checkStyleTask != null) {
        checkTask.dependsOn checkStyleTask
    }
}


task clean(type: Delete) {
    delete rootProject.buildDir
}

def publishedProjects = subprojects.findAll().findAll { it.name != "sample" && it.name != "phial-scope"  }

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    dependsOn(publishedProjects.test)

    sourceDirectories = files()
    classDirectories = files()
    executionData = files()

    publishedProjects.each { p ->
        p.android.unitTestVariants.each { variant ->
            sourceDirectories += files(variant.testedVariant.sourceSets.java.srcDirs.flatten())
            classDirectories += fileTree(
                    dir: variant.testedVariant.javaCompiler.destinationDir,
                    excludes: ['**/R.class',
                               '**/R$*.class',
                               '**/BuildConfig.*',
                               '**/Manifest*.*',
                               '**/*Lambda*.class']
            )
            executionData += files("${p.buildDir}/jacoco/test${variant.name.capitalize()}.exec")
        }
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Phial library"
        property "sonar.projectKey", "com.mindcoders.phial"
        property "sonar.jacoco.reportPaths", fileTree(dir: project.projectDir, includes: ['**/*.exec'])
    }
}
